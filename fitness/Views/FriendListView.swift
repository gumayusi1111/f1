import SwiftUI
import FirebaseFirestore

struct FriendListView: View {
    @State private var friends: [User] = []
    @State private var isLoading = false
    @State private var selectedFriend: User? = nil
    @AppStorage("userId") private var userId: String = ""
    @AppStorage("lastFriendsRefreshTime") private var lastRefreshTime: Date = .distantPast
    @State private var showRefreshLimitAlert = false
    @State private var isRefreshing = false
    @State private var isFirstLoading = true
    
    // ÁºìÂ≠òÈîÆ
    private let FRIENDS_CACHE_KEY = "friendsListCache"
    
    var body: some View {
        VStack(spacing: 0) {
            // ‰∏äÊ¨°Âà∑Êñ∞Êó∂Èó¥
            HStack {
                Text("‰∏äÊ¨°Êõ¥Êñ∞: \(formatLastRefreshTime())")
                    .font(.system(size: 12))
                    .foregroundColor(.secondary)
                
                if isLoading {
                    ProgressView()
                        .scaleEffect(0.8)
                }
            }
            .frame(maxWidth: .infinity)
            .padding(.vertical, 8)
            .background(Color(.systemBackground))
            
            if isFirstLoading {
                // È™®Êû∂Â±èÂä†ËΩΩÁä∂ÊÄÅ
                VStack(spacing: 12) {
                    ForEach(0..<6, id: \.self) { _ in
                        FriendRowSkeleton()
                            .padding(.horizontal)
                    }
                }
            } else if friends.isEmpty {
                // Á©∫Áä∂ÊÄÅËßÜÂõæ
                VStack(spacing: 16) {
                    Image(systemName: "person.2.slash")
                        .font(.system(size: 40))
                        .foregroundColor(.gray)
                    Text("ÊöÇÊó†Â•ΩÂèã")
                        .font(.headline)
                        .foregroundColor(.gray)
                    Text("ÂéªÊ∑ªÂä†‰∏Ä‰∫õÂ•ΩÂèãÂêß")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else {
                // Â•ΩÂèãÂàóË°®
                List {
                    ForEach(friends) { friend in
                        FriendRow(friend: friend)
                            .onTapGesture {
                                showFriendDetails(friend)
                            }
                    }
                }
                .listStyle(.plain)
            }
        }
        .navigationTitle("Â•ΩÂèãÂàóË°®")
        .sheet(item: $selectedFriend) { friend in
            NavigationView {
                FriendDetailView(friend: friend)
            }
        }
        .onAppear {
            loadFriends()
        }
        .refreshable {
            await refreshFriends()
        }
        .alert("Âà∑Êñ∞ÈôêÂà∂", isPresented: $showRefreshLimitAlert) {
            Button("Á°ÆÂÆö", role: .cancel) { }
        } message: {
            Text("ËØ∑Á≠âÂæÖ‰∏ÄÂàÜÈíüÂêéÂÜçÊ¨°Âà∑Êñ∞")
        }
    }
    
    // Ê£ÄÊü•ÊòØÂê¶ÂèØ‰ª•Âà∑Êñ∞
    private func canRefresh() -> Bool {
        let timeSinceLastRefresh = Date().timeIntervalSince(lastRefreshTime)
        return timeSinceLastRefresh >= 60 // 60ÁßíÈôêÂà∂
    }
    
    // Ê†ºÂºèÂåñ‰∏äÊ¨°Âà∑Êñ∞Êó∂Èó¥
    private func formatLastRefreshTime() -> String {
        if lastRefreshTime == .distantPast {
            return "Êú™Âà∑Êñ∞"
        }
        let formatter = RelativeDateTimeFormatter()
        formatter.unitsStyle = .short
        return formatter.localizedString(for: lastRefreshTime, relativeTo: Date())
    }
    
    // ÁºìÂ≠òÁõ∏ÂÖ≥ÂáΩÊï∞
    private func saveToCache(_ users: [User]) {
        if let encoded = try? JSONEncoder().encode(users) {
            UserDefaults.standard.set(encoded, forKey: FRIENDS_CACHE_KEY)
            print("‚úÖ Â•ΩÂèãÂàóË°®Â∑≤ÁºìÂ≠ò")
        }
    }
    
    private func loadFromCache() -> [User]? {
        guard let data = UserDefaults.standard.data(forKey: FRIENDS_CACHE_KEY),
              let users = try? JSONDecoder().decode([User].self, from: data) else {
            return nil
        }
        print("‚úÖ ‰ªéÁºìÂ≠òÂä†ËΩΩÂ•ΩÂèãÂàóË°®")
        return users
    }
    
    private func loadFriends(forceRefresh: Bool = false) {
        print("\n========== Âä†ËΩΩÂ•ΩÂèãÂàóË°® ==========")
        
        // Âè™ÊúâÂú®ÈùûÂº∫Âà∂Âà∑Êñ∞Êó∂Êâç‰ΩøÁî®ÁºìÂ≠ò
        if !forceRefresh, !isRefreshing, let cachedFriends = loadFromCache() {
            self.friends = cachedFriends
            self.isFirstLoading = false
            print("‚úÖ ‰ΩøÁî®ÁºìÂ≠òÊï∞ÊçÆ")
            return
        }
        
        let db = Firestore.firestore()
        
        db.collection("users").document(userId).getDocument { snapshot, error in
            if let error = error {
                print("‚ùå Âä†ËΩΩÂ•ΩÂèãÂàóË°®Â§±Ë¥•: \(error.localizedDescription)")
                isLoading = false
                return
            }
            
            if let data = snapshot?.data(),
               let friendIds = data["friendIds"] as? [String] {
                loadFriendDetails(friendIds)
            } else {
                isLoading = false
            }
        }
    }
    
    private func refreshFriends() async {
        // ÊòæÁ§∫Âà∑Êñ∞Âä®Áîª
        isRefreshing = true
        
        if !canRefresh() {
            // Â¶ÇÊûúÂú®‰∏ÄÂàÜÈíüÂÜÖÔºåÂè™ÊòæÁ§∫Âä®Áîª
            print("‚ö†Ô∏è Âà∑Êñ∞Â§™È¢ëÁπÅÔºå‰ΩøÁî®ÁºìÂ≠òÊï∞ÊçÆ")
            // Áü≠ÊöÇÂª∂Ëøü‰ª•ÊòæÁ§∫Âà∑Êñ∞Âä®Áîª
            try? await Task.sleep(nanoseconds: 500_000_000) // 0.5Áßí
            isRefreshing = false
            showRefreshLimitAlert = true
            return
        }
        
        // Ë∂ÖËøá‰∏ÄÂàÜÈíüÔºå‰ªéÊï∞ÊçÆÂ∫ìÂêåÊ≠•
        print("\nüîÑ ÂºÄÂßãÂêåÊ≠•Â•ΩÂèãÂàóË°®Êï∞ÊçÆ...")
        await MainActor.run {
            isRefreshing = true
            // Âº∫Âà∂‰ªéÊï∞ÊçÆÂ∫ìÂä†ËΩΩÊñ∞Êï∞ÊçÆ
            loadFriends(forceRefresh: true)
        }
    }
    
    private func showFriendDetails(_ friend: User) {
        selectedFriend = friend
    }
    
    private func loadFriendDetails(_ friendIds: [String]) {
        print("\nÂºÄÂßãÂä†ËΩΩÂ•ΩÂèãËØ¶ÁªÜ‰ø°ÊÅØ...")
        print("Â•ΩÂèãIDÂàóË°®: \(friendIds)")
        
        let db = Firestore.firestore()
        let group = DispatchGroup()
        var loadedFriends: [User] = []
        
        for friendId in friendIds {
            group.enter()
            print("Ê≠£Âú®Âä†ËΩΩÂ•ΩÂèãID: \(friendId)")
            
            db.collection("users").document(friendId).getDocument { snapshot, error in
                defer { group.leave() }
                
                if let error = error {
                    print("‚ùå Âä†ËΩΩÂ•ΩÂèã‰ø°ÊÅØÂ§±Ë¥•: \(error.localizedDescription)")
                    return
                }
                
                do {
                    if var friend = try snapshot?.data(as: User.self) {
                        friend.id = snapshot?.documentID ?? ""
                        print("‚úÖ ÊàêÂäüÂä†ËΩΩÂ•ΩÂèã: \(friend.username), ID: \(friend.id)")
                        loadedFriends.append(friend)
                    }
                } catch {
                    print("‚ùå Ëß£Á†ÅÂ§±Ë¥•: \(error.localizedDescription)")
                    
                    // Â∞ùËØïÊâãÂä®ÂàõÂª∫Áî®Êà∑ÂØπË±°
                    if let data = snapshot?.data(),
                       let name = data["name"] as? String {
                        let friend = User(
                            id: snapshot?.documentID ?? "",
                            username: name,
                            avatar_base64: data["avatar_base64"] as? String,
                            onlineStatus: .offline,
                            lastStatusUpdate: (data["lastStatusUpdate"] as? Timestamp)?.dateValue(),
                            friendIds: data["friendIds"] as? [String] ?? []
                        )
                        print("‚úÖ ÊâãÂä®ÂàõÂª∫Â•ΩÂèã: \(friend.username), ID: \(friend.id)")
                        loadedFriends.append(friend)
                    }
                }
            }
        }
        
        group.notify(queue: .main) {
            self.friends = loadedFriends
            self.isLoading = false
            self.isRefreshing = false
            self.isFirstLoading = false
            self.lastRefreshTime = Date()
            self.saveToCache(loadedFriends)
            print("\nÊúÄÁªàÂä†ËΩΩÁªìÊûú:")
            print("- ÊàêÂäüÂä†ËΩΩÂ•ΩÂèãÊï∞Èáè: \(friends.count)")
            print("üìÖ Êõ¥Êñ∞ÊúÄÂêéÂà∑Êñ∞Êó∂Èó¥: \(self.formatLastRefreshTime())")
            friends.forEach { friend in
                print("- Â•ΩÂèã: \(friend.username), ID: \(friend.id)")
            }
        }
    }
}

// Â•ΩÂèãË°åËßÜÂõæ
struct FriendRow: View {
    let friend: User
    
    private func statusText(_ status: User.OnlineStatus) -> String {
        switch status {
        case .online: return "Âú®Á∫ø"
        case .away: return "Á¶ªÂºÄ"
        case .offline: return "Á¶ªÁ∫ø"
        }
    }
    
    var body: some View {
        HStack(spacing: 15) {
            // Â§¥ÂÉè
            if let avatarData = Data(base64Encoded: friend.avatar_base64 ?? ""),
               let uiImage = UIImage(data: avatarData) {
                Image(uiImage: uiImage)
                    .resizable()
                    .scaledToFill()
                    .frame(width: 50, height: 50)
                    .clipShape(Circle())
                    .overlay(Circle().stroke(Color.gray.opacity(0.2), lineWidth: 1))
                    .shadow(color: .black.opacity(0.1), radius: 2, x: 0, y: 1)
            } else {
                Image(systemName: "person.circle.fill")
                    .resizable()
                    .frame(width: 50, height: 50)
                    .foregroundColor(.gray.opacity(0.3))
            }
            
            VStack(alignment: .leading, spacing: 4) {
                Text(friend.username)
                    .font(.system(size: 16, weight: .semibold))
                
                Text("ID: \(friend.id)")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                // Âú®Á∫øÁä∂ÊÄÅ
                HStack(spacing: 6) {
                    Circle()
                        .fill(friend.onlineStatus == .online ? Color.green : 
                             friend.onlineStatus == .away ? Color.yellow : Color.gray)
                        .frame(width: 8, height: 8)
                    
                    Text(statusText(friend.onlineStatus))
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            
            Spacer()
            
            Image(systemName: "chevron.right")
                .foregroundColor(.gray)
                .font(.system(size: 14))
        }
        .padding(.vertical, 8)
    }
}

// Ê∑ªÂä†È™®Êû∂Â±èÁªÑ‰ª∂
struct FriendRowSkeleton: View {
    @State private var isAnimating = false
    
    var body: some View {
        HStack(spacing: 15) {
            // Â§¥ÂÉèÈ™®Êû∂
            Circle()
                .fill(Color.gray.opacity(0.2))
                .frame(width: 50, height: 50)
            
            // ‰ø°ÊÅØÈ™®Êû∂
            VStack(alignment: .leading, spacing: 8) {
                // Áî®Êà∑ÂêçÈ™®Êû∂
                RoundedRectangle(cornerRadius: 4)
                    .fill(Color.gray.opacity(0.2))
                    .frame(width: 120, height: 16)
                
                // IDÈ™®Êû∂
                RoundedRectangle(cornerRadius: 4)
                    .fill(Color.gray.opacity(0.2))
                    .frame(width: 80, height: 12)
                
                // Áä∂ÊÄÅÈ™®Êû∂
                HStack(spacing: 6) {
                    Circle()
                        .fill(Color.gray.opacity(0.2))
                        .frame(width: 8, height: 8)
                    
                    RoundedRectangle(cornerRadius: 4)
                        .fill(Color.gray.opacity(0.2))
                        .frame(width: 40, height: 12)
                }
            }
            
            Spacer()
            
            // ÁÆ≠Â§¥È™®Êû∂
            Image(systemName: "chevron.right")
                .foregroundColor(.gray.opacity(0.2))
        }
        .padding(.vertical, 8)
        .opacity(isAnimating ? 0.6 : 1.0)
        .animation(.easeInOut(duration: 1.0).repeatForever(), value: isAnimating)
        .onAppear {
            isAnimating = true
        }
    }
} 